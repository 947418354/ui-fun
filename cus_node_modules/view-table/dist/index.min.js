!function (t, e) { if ("object" == typeof exports && "object" == typeof module) module.exports = e(require("ppw-common"), require("ppw-table-base"), require("jquery")); else if ("function" == typeof define && define.amd) define(["ppw-common", "ppw-table-base", "jquery"], e); else { var i = "object" == typeof exports ? e(require("ppw-common"), require("ppw-table-base"), require("jquery")) : e(t["ppw-common"], t["ppw-table-base"], t.jquery); for (var o in i) ("object" == typeof exports ? exports : t)[o] = i[o] } }(window, (function (t, e, i) {
  return function (t) { var e = {}; function i(o) { if (e[o]) return e[o].exports; var s = e[o] = { i: o, l: !1, exports: {} }; return t[o].call(s.exports, s, s.exports, i), s.l = !0, s.exports } return i.m = t, i.c = e, i.d = function (t, e, o) { i.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: o }) }, i.r = function (t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, i.t = function (t, e) { if (1 & e && (t = i(t)), 8 & e) return t; if (4 & e && "object" == typeof t && t && t.__esModule) return t; var o = Object.create(null); if (i.r(o), Object.defineProperty(o, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t) for (var s in t) i.d(o, s, function (e) { return t[e] }.bind(null, s)); return o }, i.n = function (t) { var e = t && t.__esModule ? function () { return t.default } : function () { return t }; return i.d(e, "a", e), e }, i.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, i.p = "", i(i.s = 3) }([function (e, i) { e.exports = t }, function (t, i) { t.exports = e }, function (t, e) { t.exports = i }, function (t, e, i) {
    "use strict"; i.r(e); var o = i(0), s = i.n(o), n = i(1), l = i.n(n); function r(t, e) { return "string" == typeof t && "string" == typeof e ? e.localeCompare(t) : t > e ? -1 : 1 } function a(t) { return !t && 0 !== t || "--" === t } function h(t, e) { var i = a(t), o = a(e); return i && o ? 0 : i ? 1 : o ? -1 : void 0 } function u(t, e) { return t._sortIndex > e._sortIndex ? 1 : -1 } var c = { string: function (t, e, i) { var o = t[i.sortId], s = e[i.sortId], n = h(o, s); return n ? i.blankToBottom ? n : i.sortAscDesc * n : 0 !== n && o !== s ? i.sortAscDesc * r(o, s) : u(t, e) }, number: function (t, e, i) { var o = t[i.sortId], s = e[i.sortId], n = h(o, s); return n ? i.blankToBottom ? n : i.sortAscDesc * n : 0 !== n && o !== s ? i.sortAscDesc * function (t, e) { var i = "number" == typeof t, o = "number" == typeof e; return i && o ? t > e ? -1 : 1 : i ? -1 : o ? 1 : r(t, e) }(o, s) : u(t, e) } }, d = s.a.property.extend({ _opt: function () { return { sortType: null, sortId: "", sortAsc: !0, sortComparers: null, sortFast: null, sortFastAsc: !0, blankToBottom: !0, unsortFn: function (t) { return t._fixed ? { row: t, top: !0 } : t._unsort ? { row: t, top: t._unsortToTop } : null } } }, _doComparer: function () { var t = this.opt, e = t.sortType, i = this._getComparer(e); if (i) { var o = this; this.rows.sort((function (e, s) { return i.call(o, e, s, { sortId: t.sortId, sortAscDesc: t.sortAsc ? -1 : 1, blankToBottom: t.blankToBottom }) })) } }, _getComparer: function (t) { var e = this.opt.sortComparers, i = null; return t && (i = e[t]), i = i || e.string }, _setSortIndex: function () { this.rows.forEach((function (t, e) { t._sortIndex = e })) }, _spliceUnsortsFromRows: function () { this._unsortToTop = [], this._unsortToBottom = []; for (var t = this.opt.unsortFn, e = 0, i = this.rows.length; e < i; e++) { var o = t(this.rows[e]); o && (o.top ? this._unsortToTop.unshift(o) : this._unsortToBottom.push(o), this.rows.splice(e, 1), e--, i--) } }, _pushUnsortsToRowsTopBottom: function () { var t = this.rows; this._unsortToTop.forEach((function (e) { t.unshift(e.row) })), this._unsortToBottom.forEach((function (e) { t.push(e.row) })) }, constructor: function (t) { this.opt = s.a.merge(this._opt(), t) }, sortRows: function (t) { if (!s.a.isArray(t)) return !1; this.rows = t; var e = this.opt; if (!e.sortId) return !1; this._setSortIndex(); var i = !1; return this._spliceUnsortsFromRows(), e.sortFast ? e.sortFastAsc !== e.sortAsc && (this.rows.reverse(), i = !0) : (this._doComparer(), i = !0), this._pushUnsortsToRowsTopBottom(), i } }), f = { isExportPdf: !1, maxHeight: null, cssName: "vt-view-table", theme: "", lineHeight: 34, pageNum: null, header: !0, enCollapseTotal: !0, collapseTotal: !1, enCheckbox: !0, enCheckboxTotal: !0, sectAll: null, multiSect: !0, enRowNumber: !0, rowNumberType: "leaf", rowsInfo: {}, sortId: "", sortAsc: !0, sortFast: !1, sortComparers: null, blankToBottom: !0, colDefaults: { minWidth: 60, maxWidth: 600, name: "" }, autoEdit: !0, fixedCol: -1, fixedRightCol: null, fixedRow: -1, fixedBottom: !1, fixedColMax: 10, fixedRowMax: 10, supportStyles: ["background", "border", "color", "fontSize", "fontWeight"], scrollbarSize: 10, scrollMinWidth: 30, noDataText: "暂无数据!", rowFilter: function (t) { return !0 } }, p = { checkbox: function (t, e, i, o, s, n) { return t || (t = ""), this.isRowSectable(e) ? this.getCheckboxContent(e) : "" }, multiLevel: function (t, e, i, o, s, n) { return t || (t = "--"), i.linkHost && (t = this.fats.linkHost(t, e, i, o, s, n)), this.getMultiLevelContent(e, t) }, string: function (t, e, i, o, s, n) { return t || (t = "--"), i.linkHost && (t = this.fats.linkHost(t, e, i, o, s, n)), t }, number: function (t, e, i, o, s, n) { return t || (t = "--"), t }, header: function (t, e, i, o, s, n) { return t || (t = ""), t }, title: function (t, e, i, o, s, n) { return t || (t = ""), t }, date: function (t, e, i, o, s, n) { return t || (t = "--"), t }, icon: function (t, e, i, o, s, n) { return t || (t = ""), t }, space: function (t, e, i, o, s, n) { return "" }, linkHost: function (t, e, i, o, s, n) { var l = i.linkHost, r = e.id || e.companyId; return l && r ? '<a href="' + (l + "/" + r) + '" title="' + t + '" target="_blank">' + t + "</a>" : t }, link: function (t, e, i, o, s, n) { return t ? (0 !== t.indexOf("http") && (t = "http://" + t), '<a href="' + t + '" title="' + t + '" target="_blank">' + t + "</a>") : "" }, text: function (t, e, i, o, s, n) { t || (t = ""); var l = ""; return l += this.isCellEditable(o, s) ? "<div class='vt-editor-cell-text el-input__inner'>" + t + "</div>" : "<div class='vt-editor-cell-normal'>" + t + "</div>" }, list: function (t, e, i, o, s, n) { return t || (t = ""), this.isCellEditable(o, s) ? '<div class="el-select"><div class="el-input el-input--suffix"><input type="text" value="' + t + '" autocomplete="off" placeholder="请选择" class="el-input__inner" readonly="readonly"><span class="el-input__suffix"><span class="el-input__suffix-inner"><i class="el-select__caret el-input__icon el-icon-arrow-up"></i></span></span></div></div>' : "<div class='vt-editor-cell-normal'>" + t + "</div>" } }, v = s.a.events.extend({
      type: "", completed: !1, constructor: function (t) { this.holder = t.holder, this.rowData = t.rowData, this.colData = t.colData, this.initData() }, initData: function () { this.id = this.colData.id, this.dataType = this.colData.dataType, this.value = this.rowData[this.id] || "" }, updateData: function (t, e) { this.rowData = t, this.colData = e, this.initData(), this.updateValue() },
      render: function () { }, focus: function () { }, updateValue: function () { }, getValue: function () { return this.value }, applyValue: function () { var t = this.getValue(); this.rowData[this.colData.id] = t }, isValueChanged: function () { return this.getValue() !== this.value }, validate: function (t) { return { valid: !0, msg: "" } }, commit: function (t) { if (this.completed) return this; this.completed = !0, this.trigger("onCommit", t) }, destroy: function () { this.container && (this.container.remove(), this.container = null) }
    }), C = {
      text: v.extend({
        type: "text",
        render: function () { this.container = $("<div class='vt-editor-text-container'></div>").appendTo(this.holder), this.$input = $("<input type='text' class='vt-editor-text el-input__inner' />").appendTo(this.container), this.colData.align && this.$input.addClass("vt-align-" + this.colData.align); var t = this; this.$input.bind("keydown", (function (t) { 37 !== t.keyCode && 39 !== t.keyCode || t.stopImmediatePropagation() })).bind("keyup", (function (e) { t.trigger("onChanging", e) })).bind("blur", (function (e) { t.commit(e) })), this.focus(), this.updateValue(), this.$input.select(), this.trigger("onRendered") }, focus: function () { this.$input.focus() }, updateValue: function () { this.$input.val(this.value) }, getValue: function () { var t = this.$input.val(); return "number" === this.dataType && t && (t = Number(t)), t }, validate: function (t) { return "number" !== this.dataType || "number" == typeof t && !isNaN(t) ? { valid: !0, msg: "" } : { valid: !1, msg: "Please enter a valid number" } }, destroy: function () { this.$input.remove(), v.prototype.destroy.apply(this, arguments) }
      }), list: v.extend({ type: "list", render: function () { if (this.colData.editorData) { var t = this, e = this.colData.editorData; '<el-option v-for="(item, index) in options" :key="index" :label="item.name || item.id" :value="item.id"></el-option>', "</el-select>", this.container = $("<div class='vt-editor-list-container'></div>").appendTo(this.holder), this.container.html("<el-select ref='vt-table-cell-select' v-model='selectData.id' filterable placeholder='请选择' @visible-change='visibleChange'>" + '<el-option v-for="(item, index) in options" :key="index" :label="item.name || item.id" :value="item.id"></el-option>' + "</el-select>"), this.selectData = { id: this.rowData[this.colData.id], name: null }, this.currentSelectListVue = new Vue({ el: ".vt-editor-list-container", data: function () { return { selectData: t.selectData, options: e } }, methods: { visibleChange: function (e) { e || t.commit() } } }), this.currentSelectListVue.$refs["vt-table-cell-select"].focus(), this.trigger("onRendered") } else console.log("please set editorData") }, focus: function () { }, updateValue: function () { }, getValue: function () { return this.selectData.id }, validate: function (t) { return "" === t || null === t ? { valid: !1, msg: "Please choose one" } : { valid: !0, msg: "" } }, destroy: function () { v.prototype.destroy.apply(this, arguments) } })
    }, b = window.jQuery || i(2), w = s.a.property.extend({
      _eventsName: function () { return ["onHeaderContextMenu", "onHeaderClick", "onHeaderDblClick", "onHeaderMouseOver", "onHeaderMouseOut", "onHeaderMouseEnter", "onHeaderMouseLeave", "onHeaderCreated", "onSort", "onColWidthChanged", "startColWidthChange", "updateColWidthChange", "doneColWidthChange", "onRowMouseEnter", "onRowMouseLeave", "onCellRendered", "onCellMouseOut", "onCellMouseOver", "onCellMouseLeave", "onCellMouseEnter", "onClick", "onDblClick", "onContextMenu", "onMouseWheel", "onScroll", "onScrollStatusChanged", "onMultiLevelClick", "onMultiLevelAllClick", "onCheckboxClick", "onCheckboxTotalClick", "onFocusedChanged", "onActiveCellChanged", "onCellEditStart", "onCellEditRendered", "onCellEditValueChanging", "onCellEditValueChanged", "onCellEditComplete", "onCellEditError", "onCellEditDestroy", "onRenderStart", "onRenderUpdate", "onRenderComplete", "onDestroy"] }, _opt: function () { return f }, _fat: function () { return p }, _editor: function () { return C }, _attachEvent: function () { var t = this; this._eventsName().forEach((function (e) { t["_" + e] && t.bind(e, t["_" + e]), t.table.bind(e, (function (i, o) { t.trigger(e, o) })) })) }, _onMultiLevelClick: function (t, e) { this.toggleItem(e.rowIndex) }, _onMultiLevelAllClick: function (t, e) { this.toggleAll() }, _onSort: function (t, e) { this.setSortCol(e.col) }, _onHeaderCreated: function (t, e) { this.initCollapseTotal(t, e), this.initCheckboxTotal(t, e) }, _onCheckboxClick: function (t, e) { this.setSectRow(e.rowIndex, e.e) }, _onCheckboxTotalClick: function (t, e) { var i = !1; b(e.el).hasClass("vt-_sect") && (i = !0), i = !i, this.opt.sectAll = i, i ? this.sectAll() : this.unsectAll() }, _startColWidthChange: function (t, e) { this.table.$headerBodys.addClass("vt-ew-resize"); var i = b(e.target).addClass("vt-active").prev(), o = parseInt(i.attr("idx"), 10); e.index = o; var s = this.getCol(o); e.col = s; var n = this.getHeaderEl(s); e.width = n.width() }, _updateColWidthChange: function (t, e) { var i = e.width + e.mouseOffsetX; this.table.setColWidth(e.col, i) }, _doneColWidthChange: function (t, e) { e.valid && (this.table.$headerBodys.removeClass("vt-ew-resize"), b(e.target).removeClass("vt-active"), this.table.resize()) }, _setColsRowsArr: function () { this.tableAllCols = [], this.tableCols = [], this.tableRows = [] }, _initCheckBoxSpaceCols: function () { this._spaceCol = { id: "vt_space_col", name: "", fat: "space", colClass: "vt-header-space", colNameClass: "vt-header-name-space", cellClass: "vt-td-space", width: 1, minWidth: 1, maxWidth: 2e3, resizable: !1, sortable: !1 }, this._checkboxCol = { id: "vt_checkbox_col", name: "", fat: "checkbox", colClass: "vt-header-checkbox", colNameClass: "vt-header-name-checkbox", cellClass: "vt-td-checkbox", width: 30, resizable: !1, sortable: !1 }; var t = this._spaceCol; if (s.a.delListItem(this.cols, { id: t.id }), this.cols.push(t), this.opt.enCheckbox) { var e = this._checkboxCol; s.a.delListItem(this.cols, { id: e.id }), this.cols.unshift(e) } }, _addIndexAttrToColsRows: function (t) { for (var e = 0, i = t.length; e < i;) { t[e]._index = e, e++ } return this }, constructor: function (t, e, i, o) { this.create(t, e, i, o) }, create: function (t, e, i, o) { if (!t) return this; this.container = t, this._instanceCacheInfo = {}, this.table = new l.a(t), this._setColsRowsArr(), this._attachEvent(), this.setEditor(o), this.setOpt(e), this.setFat(i) }, getRows: function () { return this.rows },
      getCols: function () {
        return this.cols
      }, initRowsInfo: function () { this.opt.rowsInfo = this.getMultiLevelInfo(this.rows, this.opt.fixedRow) }, initColsInfo: function () { this._initCheckBoxSpaceCols(), this.opt.colsInfo = this.getMultiLevelInfo(this.cols, this.opt.fixedCol) }, setOpt: function (t) { return this.opt = s.a.merge(this._opt(), t), this.resetAll = !0, this }, setEditor: function (t) { return this.editors = s.a.merge(this._editor(), t), this.resetAll = !0, this }, getEditor: function (t) { return arguments.length ? this.editors[t] : this.editors }, setFat: function (t) { return this.fats = s.a.merge(this._fat(), t), this.resetAll = !0, this }, getFat: function (t) { return arguments.length ? this.fats[t] : this.fats }, setData: function (t, e) { return this.cols = t || [], this.rows = e || [], this.initColsInfo(), this.initRowsInfo(), this.resetAll = !0, this }, getCol: function (t) { return s.a.isNumber(t) ? this.tableAllCols[t] : t ? s.a.isNumber(t._index) ? this.tableAllCols[t._index] : this.getColById(t.id || t) : null }, getColById: function (t) { return t ? this.getColBy({ id: t }) : null }, getColBy: function (t) { return s.a.getListItem(this.tableAllCols, t) }, getRow: function (t) { return s.a.isNumber(t) ? this.tableRows[t] : t ? s.a.isNumber(t._index) ? this.tableRows[t._index] : this.getRowById(t.id || t) : null }, getRowById: function (t) { return t ? this.getRowBy({ id: t }) : null }, getRowBy: function (t) { return s.a.getListItem(this.tableRows, t) }, showHideNoDataTxt: function () {
        var t = this.container.find(".vt-table-nodata");
        console.log(this)
        t.html(this.opt.noDataText);
        (0 === this.rows.length || this.cols.length < 2) ? t.show() : t.hide()
      },
      render: function (t) {
        return this.showHideNoDataTxt(), t && (this.resetAll = !0), this.resetAll ? this.initView() : this.updateView(), this.table.render(), this.resetAll = !1, this
      },
      initView: function () {
        this.clean(),
          this.initTableColsData(),
          this.initSort(), 
          this.initSect(), this.initCollapse(), this.initTableRowsData(), this.table.setCols(this.tableCols, this.tableAllCols), this.table.setRows(this.tableRows), this.table.init(this.opt)
      }, updateView: function () { if (this.table.headerRendered && (this.initTableRowsData(), this.table.setRows(this.tableRows), this.table.updateBodySize(), this.rmRow)) { var t = this.rmRow._index; return this.removeRowsFrom(t), this.rmRow = null, this } },
      initTableColsData: function () {
        this._autoWidthCols = [],
          this._definedWidth = 0,
          this.tableAllCols.length = 0,
          this.tableCols.length = 0;
        var t = [], e = this.getCols(), i = this;
        !function e(o) {
          if (s.a.isArray(o)) {
            var n = o.length, l = 0;
            o.forEach((function (o) {
              o._listLength = n, o._listIndex = l, l++, i.initColOpt(o), i.initColEditor(o), i.initColFat(o), i.initColWidth(o), o._isMultiLevelGroup ? (t.push(o), e(o.childs)) : i.tableCols.push(o)
            }))
          }
        }(e),
          this.initAutoWidthColsWidth(), this.tableAllCols = this.tableAllCols.concat(this.tableCols).concat(t), this._addIndexAttrToColsRows(this.tableAllCols), this._setColHeaderInfo(e, this.tableCols, t);
        var o = this.tableCols[this.tableCols.length - 2];
        if (!o) return this
        return o.colClass = o.colClass || "", o.colClass += " vt-last-padding-right", o.cellClass = o.cellClass || "", o.cellClass += " vt-last-padding-right", this
      },
      _setColHeaderInfo: function (t, e, i) { var o = this.opt.colsInfo.maxLevel; e.forEach((function (t) { t._reverseLevel = o, t._parent && (t._parent._reverseLevel = o - 1) })); var s = i.length; if (s) for (var n = s - 1; n >= 0; n--) { var l = i[n]; l._trElMark = !1, l.colspanNum = this._getColGroupColspan(l), l.width = this._getColGroupWidth(l), l._parent ? l._parent._reverseLevel = l._reverseLevel - 1 : l.topLevelOffset = l._reverseLevel } this._setColRowspanNum(t, 0, o, 0) }, _setColRowspanNum: function (t, e, i, o) { var s = this; t.forEach((function (t) { if (t._trEl = e + o, t._isMultiLevelGroup) { var n = t.topLevelOffset; n ? t.rowspanNum = n + 1 : n = o, s._setColRowspanNum(t.childs, e + 1, i, n) } else { var l = i + 1 - e - o; l > 1 && (t.rowspanNum = l) } })) }, _getColGroupColspan: function (t) { if (!t || !t.childs) return 0; var e = 0; return t.childs.forEach((function (t) { e += t.colspanNum || 1 })), e }, _getColGroupWidth: function (t) { if (!t || !t.childs) return 0; var e = 0; return t.childs.forEach((function (t) { e += t.width })), e }, initColEditor: function (t) { if (!t._isMultiLevelGroup) { var e = t.editor; if (e && "string" == typeof e) { var i = this.getEditor(e); i ? (t._editor = i, t.fat || (t.fat = e)) : (t.editor = null, t._editor = null) } } }, initColFat: function (t) { this.initColFatByType(t, "headerFat", "header"), this.initColFatByType(t, "titleFat", "title"); var e = this.getColFat(t); return this.initColFatByType(t, "fat", e), t }, initColOpt: function (t) { t.id || (t.id = "_" + s.a.random(5)), this.initColDefaultOpt(t) }, initColDefaultOpt: function (t) { if (!t._isMultiLevelGroup) { var e = this.opt.colDefaults; for (var i in e) void 0 === t[i] && (t[i] = e[i]) } }, initColWidth: function (t) { if (!t._isMultiLevelGroup) { if (t.id === this._spaceCol.id) return t.width = 1, void (this._definedWidth += 1); if (s.a.isNumber(t.width) && !t._isAutoWidth) return this._definedWidth += t.width, t.minWidth = Math.min(t.minWidth, t.width), void (t.maxWidth = Math.max(t.maxWidth, t.width)); this._autoWidthCols.push(t), t._isAutoWidth = !0 } }, initAutoWidthColsWidth: function () { var t = this.container.width() - this._definedWidth, e = this._autoWidthCols.length, i = 1, o = 0; e > 0 && (i = parseInt(t / e, 10), o = t - i * e), this._autoWidthCols.forEach((function (o, n) { var l = i; s.a.isNumber(o.minWidth) && o.minWidth - l > 0 && (o.width = o.minWidth, t -= o.minWidth, e--) })), e > 0 && (i = parseInt(t / e, 10), o = t - i * e), this._autoWidthCols.forEach((function (t, e) { var n = i; n = s.a.maxmin(n, t.minWidth, t.maxWidth), 0 === e && (n += o), t.width = n })) }, initColFatByType: function (t, e, i) { var o = void 0; return (o = "function" == typeof t[e] ? t[e] : this.getFat(i)) || (o = this.fats.string), t["_" + e] = o.bind(this), this }, setColWidth: function (t, e, i, o) { var n = this.getCol(t); return n && s.a.isNumber(e) ? (e = Math.max(0, e), e = Math.round(e), i || (n.minWidth = Math.min(n.minWidth, e), n.maxWidth = Math.max(n.maxWidth, e)), this.table.setColWidth(n, e), o && this.resize(), this) : this }, showCol: function (t, e, i) { var o = this.getCol(t); if (!o) return this; var n = this.getHeaderEl(o).width(), l = o.originalWidth || o.width || n; return s.a.isNumber(e) && (l = e, o.originalWidth = e), this.setColWidth(o._index, l, i), this }, hideCol: function (t, e) { var i = this.getCol(t); if (!i) return this; var o = this.getHeaderEl(i).width(); return s.a.isNumber(i.originalWidth) || (i.originalWidth = i.width || o), this.setColWidth(i._index, 0, e), this }, showCols: function (t, e, i) { if (!s.a.isArray(t)) return this; for (var o = 0, n = t.length; o < n; o++)this.showCol(t[o], e); return i && this.resize(), this }, hideCols: function (t, e) { if (!s.a.isArray(t)) return this; for (var i = 0, o = t.length; i < o; i++)this.hideCol(t[i]); return e && this.resize(), this }, getColType: function (t) { if (!t) return ""; var e = t.dataType; return e || "string" != typeof t.fat || (e = t.fat), e }, getColFat: function (t) { if (!t) return ""; var e = t.fat; return !e && t.dataType && (e = t.dataType), e }, getHeaderEl: function (t) { var e = this.getCol(t); return this.table.getHeaderEl(e) }, initTableRowsData: function () { this.handleRowFilter(), this.handleSort(), this.handleRowNumber(), this.tableRows.length = 0; var t = this; return function e(i, o) { if (s.a.isArray(i)) { var n = i.length, l = 0; i.forEach((function (i) { i._invisible || (i._listLength = n, i._listIndex = l, l++, t.tableRows.push(i), i._isMultiLevelGroup && i._collapsed || e(i.childs, i)) })) } }(this.getRows()), this._addIndexAttrToColsRows(this.tableRows), this }, handleRowFilter: function () { var t = this.opt.rowFilter; return "function" != typeof t && (t = function (t) { return !0 }), this.eachRow((function (e, i, o) { var s = !1; "boolean" == typeof e.invisible ? s = e.invisible : s = !t.call(this, e); if (e._invisible = s, !s) for (var n = e; n._parent;)n._parent._invisible = !1, n = n._parent })), this }, getRowEls: function (t) { var e = this.getRow(t); return e ? this.table.getRowEls(e._index) : null }, getCellEls: function (t) { var e = this.getRow(t); return e ? this.table.getCellEls(e._index) : null }, getCellEl: function (t, e) { var i = this.getRow(t); if (!i) return null; var o = this.getCol(e); return o ? this.table.getCellEl(i._index, o._index) : null }, initCollapse: function () { var t = this.opt.collapseTotal; !0 !== t ? !1 !== t || this.setRowsCollapse(!1) : this.setRowsCollapse(!0) }, initCollapseTotal: function (t, e) { var i = this.getColBy({ fat: "multiLevel" }); if (i) { var o = this.getCollapseWidth(), s = this.getHeaderEl(i); s.find(".vt-col-content").css({ "margin-left": o + "px" }); var n = s.find(".vt-header-expand-collapse-total"); n.length || (n = b("<div/>").addClass("vt-header-expand-collapse-total").appendTo(s)), n.width(o), n.empty(), this.updateCollapseIcon(i, n) } }, getCollapseWidth: function () { var t = this.opt.enRowNumber, e = this.opt.rowNumberWidth + 5, i = 0; return this.opt.rowsInfo.isMultiLevel ? i = 15 + Math.max(0, e - 15) : t && (i = e), i }, updateCollapseIcon: function (t, e) { var i = this.opt.rowsInfo.isMultiLevel, o = this.opt.enCollapseTotal; i && o && this.enCollapseTotal(t, e) }, enCollapseTotal: function (t, e) { var i = b("<div/>").addClass("vt-icons vt-multiLevel-icon vt-expand-collapse-total-icon").appendTo(e); this.setElMultiLevelIcon(i, this.opt.collapseTotal) }, expandTotal: function (t) { this.opt.collapseTotal = !1, this.setRowsCollapse(!1, t), this.setCollapseTotalIcon(), this.table.removeAll(), this.render() }, collapseTotal: function () { this.opt.collapseTotal = !0, this.setRowsCollapse(!0), this.setCollapseTotalIcon(), this.table.removeAll(), this.render() }, toggleAll: function () { this.opt.collapseTotal ? this.expandTotal() : this.collapseTotal() }, setRowsCollapse: function (t, e) { var i = 1, o = s.a.isNumber(e); !function n(l, r) { s.a.isArray(l) && l.forEach((function (s) { s.childs && (i++, s._collapsed = t, o ? i <= e && n(s.childs, s) : n(s.childs, s)) })) }(this.getRows()) }, setCollapseTotalIcon: function () { if (this.table.headerRendered) { var t = this.table.$headerBodys.find(".vt-expand-collapse-total-icon"); this.setElMultiLevelIcon(t, this.opt.collapseTotal) } }, expandItem: function (t) { var e = this.getRow(t); e && (e.childs ? s.a.isArray(e.childs) && (e._collapsed = !1, this.rmRow = e, this.handleCollapsedItemStyle(e), this.render()) : this.trigger("onRowRequestChilds", e)) }, collapseItem: function (t) { var e = this.getRow(t); e && s.a.isArray(e.childs) && (e._collapsed = !0, this.rmRow = e, this.handleCollapsedItemStyle(e), this.render()) }, toggleItem: function (t) { var e = this.getRow(t); e && (e._collapsed ? this.expandItem(e._index) : this.collapseItem(e._index)) }, handleCollapsedItemStyle: function (t) { if (this.table.headerRendered) { var e = this.table.getRowEls(t._index); if (e) { var i = t._collapsed; i ? e.removeClass("vt-expanded").addClass("vt-collapsed") : e.removeClass("vt-collapsed").addClass("vt-expanded"); var o = e.find(".vt-multiLevel-icon"); this.setElMultiLevelIcon(o, i) } } }, setElMultiLevelIcon: function (t, e) { t && (t.removeClass("vt-icon-collapsed vt-icon-expanded"), e ? t.addClass("vt-icon-collapsed") : t.addClass("vt-icon-expanded")) }, isEnRowNumber: function (t) { return !t._invisible && (!t._fixed && ("space" !== t._rowType && !1 !== t.enRowNumber)) }, handleEnRowNumber: function (t, e, i) { return this.isEnRowNumber(t) ? "list" === this.opt.rowNumberType ? e : i : "" }, handleRowNumber: function () { this.opt.rowNumber = "", this.opt.rowNumberWidth = 0; var t = this.opt.enRowNumber; if (!t) return this; "function" != typeof t && (t = this.handleEnRowNumber); var e = this.getRows(), i = "", o = 1, n = this; !function e(l, r) { if (s.a.isArray(l)) { var a = 1; l.forEach((function (s) { if (n.isRowGroup(s)) s._rowNumber = "", e(s.childs, s); else { var l = t.call(n, s, a, o); s._rowNumber = l, l && (l += "", i.length <= l.length && (i = l), a += 1, o += 1) } })) } }(e), this.opt.rowNumber = i, this.opt.rowNumberWidth = this.table.getTextWidth(i) }, initSect: function () { var t = this.opt.sectAll; !0 !== t ? !1 !== t || this.unsectAllToData() : this.sectAllToData() }, isEnCheckboxTotal: function () { var t = this.opt.enCheckbox, e = this.opt.enCheckboxTotal; return !(!t || !e) }, initCheckboxTotal: function (t, e) { if (this.isEnCheckboxTotal()) { var i = this._checkboxCol, o = this.opt.enCheckboxTotal; "function" != typeof o && (o = this.enCheckboxTotal); var s = this.getHeaderEl(i).find(".vt-col-content"); o.call(this, i, s) } }, enCheckboxTotal: function (t, e) { var i = b("<div/>").addClass("vt-icons vt-checkbox vt-checkbox-total"); this.opt.sectAll && i.addClass("vt-_sect"), e.empty().append(i) }, updateCheckboxTotal: function (t) { if (this.isEnCheckboxTotal()) { var e = this._checkboxCol, i = this.getHeaderEl(e).find(".vt-checkbox-total"); i.length && (i.removeClass("vt-mixed"), i.removeClass("vt-_sect"), !1 !== t && (!0 !== t ? i.addClass("vt-mixed") : i.addClass("vt-_sect"))) } }, updateSectAll: function (t, e) { var i = !1; return e !== this._instanceCacheInfo.sectAll && (this._instanceCacheInfo.sectAll = e, this.updateCheckboxTotal(e), i = !0), t !== this._instanceCacheInfo.sectLength && (this._instanceCacheInfo.sectLength = t, i = !0), i ? (this.trigger("onSectChanged", { sectLength: t, totalSectable: this.totalSectable, sectAll: e }), this) : this }, sectAll: function () { return this.sectAllToData(), this.updateSectableRowsStatus(), this.updateSectAll(this.totalSectable, !0), this }, sectAllToData: function () { this.g_sect_order = 0; var t = this; return this.eachSectableRows((function (e, i, o) { e._sect = !0, e._sectOrder = t.g_sect_order++ })), this }, unsectAll: function () { return this.unsectAllToData(), this.updateSectableRowsStatus(), this.updateSectAll(0, !1), this }, unsectAllToData: function () { return this.eachSectableRows((function (t, e, i) { t._sect = !1 })), this }, updateSectableRowsStatus: function () { var t = this.getViewArea().rowsIndexs, e = this; return t.forEach((function (t) { var i = e.getRow(t); e.isRowSectable(i) && e.updateRowSect(i) })), this }, g_sect_order: 0, addRowSect: function (t) { return t ? (this.addRowStatus(t, "_sect"), t._sectOrder = this.g_sect_order++, this.updateRowCheckbox(t), this) : this }, removeRowSect: function (t) { return t ? (this.removeRowStatus(t, "_sect"), this.updateRowCheckbox(t), this) : this }, updateRowSect: function (t) { return t ? (this.updateRowStatus(t, "_sect"), this.updateRowCheckbox(t), this) : this }, updateRowCheckbox: function (t) { if (!this.opt.enCheckbox) return this; this.updateCell(t._index, this._checkboxCol._index), this.updateSectStatus() }, updateSectStatus: function () { var t = this; clearTimeout(this.timeout_updateSectStatus), this.timeout_updateSectStatus = setTimeout((function () { var e = t.getSectRows().length, i = null; 0 === e ? i = !1 : e === t.totalSectable && (i = !0), t.updateSectAll(e, i) }), 100) }, handleMultiSect: function (t, e) { t._sect ? this.unsetSectRow(t._index) : this.addRowSect(t) }, handleSingleSect: function (t, e) { this.unsetAllSectRows(), this.addRowSect(t) }, unsetSectRow: function (t) { if (arguments.length) { var e = this.getRow(t); e && this.removeRowSect(e) } else this.unsetAllSectRows() }, unsetAllSectRows: function () { var t = this; this.eachSectableRows((function (e, i, o) { e._sect && t.removeRowSect(e) })) }, setSectRow: function (t, e) { var i = this.getRow(t); i && (this.opt.multiSect ? this.handleMultiSect(i, e) : this.handleSingleSect(i)) }, getSectRow: function () { var t = null, e = this.getSectRows(); return e.length && (t = e[0]), t }, getSectRows: function () { var t = []; return this.eachSectableRows((function (e, i, o) { e._sect && t.push(e) })), t.length > 1 && t.sort((function (t, e) { var i = t._sectOrder, o = e._sectOrder; return i > o ? 1 : i < o ? -1 : 0 })), t }, eachSectableRows: function (t) { if ("function" != typeof t) return this; var e = 0, i = this; return this.eachRow((function (o, s, n) { i.isRowSectable(o) && (t.call(this, o, s, n), e += 1) })), this.totalSectable = e, this }, addRowStatus: function (t, e) { t && (t[e] = !0, this.updateRowStatus(t, e)) }, removeRowStatus: function (t, e) { t && (t[e] = !1, this.updateRowStatus(t, e)) }, updateRowStatus: function (t, e) { if (this.table.headerRendered) { var i = this.table.getRowEls(t._index); if (i) { var o = "vt-" + e; t[e] ? i.addClass(o) : i.removeClass(o) } } }, initSort: function () { var t = this.opt, e = t.sortId; if (!e) return this; var i = e; s.a.isArray(e) && (i = e[0]); var o = this.getSortCol(i); return o ? (o.sortAsc = t.sortAsc, this.sortCol = o, this) : this }, setSortCol: function (t) { if (this.sortCol = t, this.table.headerRendered) { this.table.setSortCol(this.sortCol); var e = this.opt.fixedRows; this.table.rows.length - e < 2 || (this.table.hasFixedRows ? this.table.removeRowsFrom(e) : this.table.removeAll(), this.render()) } }, getSortCol: function (t) { return s.a.getListItem(this.tableCols, { id: t }) }, getSortComparers: function () { return s.a.merge(c, this.opt.sortComparers) }, handleSort: function () { this.sortRowData(), this.table.setSortCol(this.sortCol) }, sortRowData: function (t) { var e = this.sortCol; if (e) { var i = this.getColType(e), o = e.id, n = e.sortAsc, l = this.getSortComparers(), r = !1; this.opt.sortFast && (r = this.sortId === o); var a = { sortType: i, sortId: o, sortAsc: n, sortComparers: l, sortFast: r, sortFastAsc: this.sortAsc, blankToBottom: this.opt.blankToBottom }; this.sortId = o, this.sortAsc = n, this.sortComparers = l; var h = !1, u = new d(a); !function t(e, i) { s.a.isArray(e) && (e.length > 1 && (h = u.sortRows(e)), e.forEach((function (e) { e && t(e.childs, e) }))) }(this.getRows()), !t && h && this.table.removeAll() } }, getMultiLevelInfo: function (t, e) { var i = 0, o = 0; !function t(s, n) { s.forEach((function (s) { !function (t, s) { t._fixed = !1, e > -1 && o <= e && (t._fixed = !0), t._isMultiLevelGroup = !1, t._childsLength = 0, t.childs && (t._isMultiLevelGroup = !0, t._childsLength = t.childs.length), t._parent = s; var n = 0; s && (n = s._groupLevel + 1) > i && (i = n), t._groupLevel = n, o += 1 }(s, n), s.childs && s.childs instanceof Array && t(s.childs, s) })) }(t); for (var s = !1, n = 0, l = t.length; n < l;) { var r = t[n]; if (r._isMultiLevelGroup || "group" === r._rowType) { s = !0; break } n++ } return { isMultiLevel: s, maxLevel: i, maxIndex: o } }, eachMultiLevel: function (t, e) { if ("function" != typeof e) return this; return function t(i, o) { if (s.a.isArray(i)) for (var n = 0, l = i.length; n < l; n++) { var r = i[n]; if (!1 === e.call(this, r, n, o)) return !1; if (!1 === t(r.childs, r)) return !1 } }(t), this }, eachRow: function (t) { var e = this.getRows(); return this.eachMultiLevel(e, t), this }, eachCol: function (t) { var e = this.getCols(); return this.eachMultiLevel(e, t), this }, isRowFixed: function (t) { return !!t && !!t._fixed }, isRowGroup: function (t) { return !!t && !(!t._isMultiLevelGroup && "group" !== t._rowType) }, isRowEmptyGroup: function (t) { return !(!this.isRowGroup(t) || !t.childs || 0 !== t._childsLength) }, isRowLeaf: function (t) { return !!t && ("space" !== t._rowType && (!this.isRowFixed(t) && !this.isRowGroup(t))) }, isRowSectable: function (t) { return !!t && (t.hasOwnProperty("sectable") ? !!t.sectable : this.isRowLeaf(t)) }, isCellEditable: function (t, e) { var i = this.getRow(t); if (!i) return !1; var o = this.getCol(e); return !!o && this.table.isCellEditable(i._index, o._index) }, updateRow: function (t) { var e = this.getRow(t); return e ? (this.table.updateRow(e._index), this) : this }, updateCell: function (t, e) { var i = this.getRow(t); if (!i) return this; var o = this.getCol(e); return o ? (this.table.updateCell(i._index, o._index), this) : this }, getCheckboxContent: function (t) { this.opt.lineHeight; var e = t._sect, i = []; return i.push('<div class="vt-icons  vt-checkbox'), e && i.push(" vt-_sect"), i.push('">'), i.push("</div>"), i.join("") }, getMultiLevelContent: function (t, e) { var i = this.getMultiLevelItemTemplate(t); return s.a.replace(i, { value: e, rowNumber: t._rowNumber }) }, getMultiLevelItemTemplate: function (t) { var e = this.opt, i = e.enRowNumber, o = e.rowNumberWidth, n = e.rowsInfo.isMultiLevel, l = this.isRowGroup(t), r = this.isRowEmptyGroup(t), a = t._collapsed, h = s.a.toNumber(t._groupLevel); return this.generateMultiLevelItemTemplate(i, o, n, l, r, a, h) }, generateMultiLevelItemTemplate: function (t, e, i, o, s, n, l) { var r = [], a = -15; i && (a = 0), t && (a = Math.max(a, e + 5 - 15)); var h = "", u = "", c = ""; if (o) { u = " vt-multiLevel-group"; var d = n ? "vt-icon-collapsed" : "vt-icon-expanded"; s && (d = ""), c = '<div class="vt-icons vt-multiLevel-icon ' + d + '"></div>' } for (h += '<div class="vt-multiLevel-item' + u + '" ', a < 0 && (h += 'style="padding-left:' + (15 + a) + 'px;"'), h += ">" + c + "{value}</div>", r.push(h); l > 0;)r.unshift('<div class="vt-multiLevel-level">'), r.push("</div>"), l -= 1; a < 0 && (a = 0), r.unshift('<div class="vt-multiLevel" style="padding-left:' + a + 'px;">'), r.push("</div>"); return function () { if (t && !o) { var s = e; i && (s -= 4, s = Math.max(s, 12)); var n = '<div class="vt-multiLevel-tr-number" style="width:' + s + 'px;">'; n += "{rowNumber}", n += "</div>", r.unshift(n) } }(), r.join("") }, scrollToRow: function (t) { var e = this.getRow(t); return this.table.scrollToItem(e, null), this }, scrollToCol: function (t) { var e = this.getCol(t); return this.table.scrollToItem(null, e), this }, scrollToCell: function (t, e) { var i = this.getRow(t), o = this.getCol(e); return this.table.scrollToItem(i, o), this }, scrollRowIntoView: function (t) { var e = this.getRow(t); return this.table.scrollItemIntoView(e, null), this }, scrollColIntoView: function (t) { var e = this.getCol(t); return this.table.scrollItemIntoView(null, e), this }, scrollCellIntoView: function (t, e) { var i = this.getRow(t), o = this.getCol(e); return this.table.scrollItemIntoView(i, o), this }, getScrollBarWidth: function () { return this.table.getScrollBarWidth.apply(this.table, arguments) }, getScrollBarHeight: function () { return this.table.getScrollBarHeight.apply(this.table, arguments) }, getScrollViewWidth: function () { return this.table.getScrollViewWidth.apply(this.table, arguments) }, getScrollViewHeight: function () { return this.table.getScrollViewHeight.apply(this.table, arguments) }, getScrollWidth: function () { return this.table.getScrollWidth.apply(this.table, arguments) }, getScrollHeight: function () { return this.table.getScrollHeight.apply(this.table, arguments) }, getViewArea: function () { return this.table.getViewArea.apply(this.table, arguments) }, getExportHeadStr: function () { return this.table.getExportHeadStr.apply(this.table, arguments) }, getExportBodyStr: function (t, e, i, o) { var n = this.getRows(), l = []; return i ? (this.sortRowData(!0), function t(e, i) { s.a.isArray(e) && e.forEach((function (e) { l.push(e), t(e.childs, e) })) }(n), this.table._exportTempRows = l) : this.table._exportTempRows = this.table.rows, this.table.getExportBodyStr.apply(this.table, [t, e, o]) }, removeRow: function () { return this.table.removeRow.apply(this.table, arguments) }, removeRows: function () { return this.table.removeRows.apply(this.table, arguments) }, removeRowsFrom: function () { return this.table.removeRowsFrom.apply(this.table, arguments) }, removeCol: function () { return this.table.removeCol.apply(this.table, arguments) }, removeCols: function () { return this.table.removeCols.apply(this.table, arguments) }, removeCell: function () { return this.table.removeCell.apply(this.table, arguments) }, removeCells: function () { return this.table.removeCells.apply(this.table, arguments) }, removeAll: function () { return this.table.removeAll.apply(this.table, arguments) }, reset: function () { return this.render(!0), this }, update: function () { return this.table.removeAll(), this.render(), this }, resize: function () { return this.table.headerRendered && this.table.resize(), this },
      clean: function () {
        return this._instanceCacheInfo = {}, this.sortId = null, this.sortAsc = null, this.sortComparers = null, this.sortCol = null, this.table.sortCol = null, this
      },
      destroy: function () { return this.clean(), this.unbind(), this.table && (this.table.unbind(), this.table.destroy(), this.table = null), this.specialCols = null, this.tableAllCols = null, this.tableCols = null, this.tableRows = null, this.fats = null, this.editors = null, this.opt = null, this.cols = [], this.rows = [], this }
    }); window["ppw-view-table"] = w; e.default = w
  }])
}));